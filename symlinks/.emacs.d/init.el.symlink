; -*-Lisp-*-

;;(setq debug-on-error t)

;; Packages
(require 'package)
;; Elpa Mirror
;; https://github.com/d12frosted/elpa-mirror
;; (setq package-archives
;;       '(("melpa" . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/melpa/")
;;         ("org"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/org/")
;;         ("gnu"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/gnu/")))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

;; Use use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
;; Install all packages if not present
;; so you don't need :ensure t
(setq use-package-always-ensure t)
;; (setq package-enable-at-startup nil)

;; Better Defaults
;; (use-package better-defaults)
;;(require 'better-defaults)

;; Disable graphical toolbar
(tool-bar-mode -1)

;; Use visible bell
(setq visible-bell t)

;; Emacs server
(unless (boundp 'server-process)
  (server-start))

;; Use Emacsclient as $EDITOR of child processes
(define-key (current-global-map)
  [remap async-shell-command] 'with-editor-async-shell-command)
(define-key (current-global-map)
  [remap shell-command] 'with-editor-shell-command)
(add-hook 'shell-mode-hook  'with-editor-export-editor)
(add-hook 'term-mode-hook   'with-editor-export-editor)
(add-hook 'eshell-mode-hook 'with-editor-export-editor)

;; Separate custom config vars
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)

;; Theme
(use-package material-theme
  :config (load-theme 'material t)
  (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :box        nil)))

(use-package zenburn-theme
  :config
  (setq zenburn-override-colors-alist
        '(
          ;; Zenburn HC
          ;; https://github.com/edran/hc-zenburn-emacs/blob/master/hc-zenburn-theme.el
          ("zenburn-fg+1"     . "#FFFFEF")
          ("zenburn-fg"       . "#DCDCCC")
          ("zenburn-fg-1"     . "#70705E")
          ("zenburn-bg-2"     . "#000000")
          ("zenburn-bg-1"     . "#202020")
          ("zenburn-bg-05"    . "#2D2D2D")
          ("zenburn-bg"       . "#313131")
          ("zenburn-bg+05"    . "#383838")
          ("zenburn-bg+1"     . "#3E3E3E")
          ("zenburn-bg+2"     . "#4E4E4E")
          ("zenburn-bg+3"     . "#5E5E5E")
          ("zenburn-red+1"    . "#E9B0B0")
          ("zenburn-red"      . "#D9A0A0")
          ("zenburn-red-1"    . "#C99090")
          ("zenburn-red-2"    . "#B98080")
          ("zenburn-red-3"    . "#A97070")
          ("zenburn-red-4"    . "#996060")
          ("zenburn-orange"   . "#ECBC9C")
          ("zenburn-yellow"   . "#FDECBC")
          ("zenburn-yellow-1" . "#EDDCAC")
          ("zenburn-yellow-2" . "#DDCC9C")
          ("zenburn-green-1"  . "#6C8C6C")
          ("zenburn-green"    . "#8CAC8C")
          ("zenburn-green+1"  . "#9CBF9C")
          ("zenburn-green+2"  . "#ACD2AC")
          ("zenburn-green+3"  . "#BCE5BC")
          ("zenburn-green+4"  . "#CCF8CC")
          ("zenburn-cyan"     . "#A0EDF0")
          ("zenburn-blue+1"   . "#9CC7FB")
          ("zenburn-blue"     . "#99DDE0")
          ("zenburn-blue-1"   . "#89C5C8")
          ("zenburn-blue-2"   . "#79ADB0")
          ("zenburn-blue-3"   . "#699598")
          ("zenburn-blue-4"   . "#597D80")
          ("zenburn-blue-5"   . "#436D6D")
          ("zenburn-magenta"  . "#E090C7")))
  )
;;   (load-theme 'zenburn t))

;; Make it easier to discover key shortcuts
;; https://people.gnome.org/~federico/blog/bringing-my-emacs-from-the-past.html
(use-package which-key
  :diminish
  :config
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (setq which-key-idle-delay 0.1))

;; Modeline
;; https://github.com/tarsius/moody
(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))
(use-package minions
  :config (minions-mode 1))

;; Ivy
;; https://github.com/daviwil/emacs-from-scratch/blob/3075158cae210060888001c0d76a58a4178f6a00/init.el
;; (use-package ivy
;;   :diminish
;;   :bind (("C-s" . swiper)
;;          :map ivy-minibuffer-map
;;          ("TAB" . ivy-alt-done)
;;          ("C-l" . ivy-alt-done)
;;          ("C-j" . ivy-next-line)
;;          ("C-k" . ivy-previous-line)
;;          :map ivy-switch-buffer-map
;;          ("C-k" . ivy-previous-line)
;;          ("C-l" . ivy-done)
;;          ("C-d" . ivy-switch-buffer-kill)
;;          :map ivy-reverse-i-search-map
;;          ("C-k" . ivy-previous-line)
;;          ("C-d" . ivy-reverse-i-search-kill))
;;   :config
;;   (ivy-mode 1))

;; https://blog.jft.rocks/emacs/time-based-theme.html
;; (defun set-light-theme ()
;;   "Set the light theme with some customization if needed."
;;   (interactive)
;;   (load-theme 'doom-solarized-light t))

;; (defun set-dark-theme ()
;;   "Set the dark theme with some customization if needed."
;;   (interactive)
;;   (load-theme 'doom-tomorrow-night t))

;; (let ((current-hour (string-to-number (format-time-string "%H"))))
;;   (if (or (< current-hour 6) (> current-hour 20)) (set-light-theme) (set-dark-theme)))

;; (defun theme-switcher ()
;;   (let ((current-hour (string-to-number (format-time-string "%H"))))
;;     (if (or (< current-hour 6) (> current-hour 20)) (set-light-theme) (set-dark-theme))))

;; Run at every 3600 seconds, after 0s delay
;(run-with-timer 0 3600 'theme-switcher)


;; OSX customizations
(when (memq window-system '(mac ns))
  ;; Use Spotlight on OSX
  (setq locate-command "mdfind")
  ;; Enable cooperation between the system clipboard and the Emacs
  ;; kill ring
  (set-clipboard-coding-system 'mac-roman)
  ;; Disable dialog boxes because they are indismissable on OSX
  ;; http://superuser.com/questions/125569/how-to-fix-emacs-popup-dialogs-on-mac-os-x
  (defadvice yes-or-no-p (around prevent-dialog activate)
    "Prevent yes-or-no-p from activating a dialog"
    (let ((use-dialog-box nil))
      ad-do-it))
  (defadvice y-or-n-p (around prevent-dialog-yorn activate)
    "Prevent y-or-n-p from activating a dialog"
    (let ((use-dialog-box nil))
      ad-do-it)))

;; Movement
(defun up-slightly () (interactive) (scroll-up 5))
(defun down-slightly () (interactive) (scroll-down 5))
(global-set-key [mouse-4] 'down-slightly)
(global-set-key [mouse-5] 'up-slightly)
(defun up-one () (interactive) (scroll-up 1))
(defun down-one () (interactive) (scroll-down 1))
(global-set-key [S-mouse-4] 'down-one)
(global-set-key [S-mouse-5] 'up-one)
(defun up-a-lot () (interactive) (scroll-up))
(defun down-a-lot () (interactive) (scroll-down))
(global-set-key [C-mouse-4] 'down-a-lot)
(global-set-key [C-mouse-5] 'up-a-lot)
(mouse-avoidance-mode 'cat-and-mouse)
(global-set-key (kbd "C-x p") 'previous-multiframe-window)
(global-set-key (kbd "C-x n") 'next-multiframe-window)
(global-set-key (kbd "C-x 3") 'follow-delete-other-windows-and-split)
;;
;; Use C-x C-m instead of Alt-x
;; from https://sites.google.com/site/steveyegge2/effective-emacs
(global-set-key "\C-x\C-m" 'execute-extended-command)
;; Use backward-kill-word instead of backspacing to increase typing speed
(global-set-key "\C-w" 'backward-kill-word)
;; C-w is usually bound to kill-region, so remap it
(global-set-key "\C-x\C-k" 'kill-region)
;;
;; http://jfm3-repl.blogspot.com/search/label/emacs
;;(global-set-key (kbd "C-o") 'undo)
;;
;; Window management
(global-set-key (kbd "C-x p") 'previous-multiframe-window)
(global-set-key (kbd "C-x n") 'next-multiframe-window)
(global-set-key (kbd "C-x 3") 'follow-delete-other-windows-and-split)
;; Switch windows with shift-arrows instead of "C-x o"
;;(windmove-default-keybindings)
;; Move buffers between windows

;; Move buffers to adjacent windows
(use-package buffer-move
  :config
  (global-set-key (kbd "<C-S-up>")     'buf-move-up)
  (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  (global-set-key (kbd "<C-S-right>")  'buf-move-right))

;;
;; Helm
;; https://people.gnome.org/~federico/blog/bringing-my-emacs-from-the-past.html
(use-package helm
 :diminish
 :init (helm-mode t)
 :bind (("M-x"     . helm-M-x)
        ("C-x C-m" . helm-M-x)
        ("C-x C-f" . helm-find-files)
        ("C-x b"   . helm-mini)     ;; See buffers & recent files; more useful
        ("C-x r b" . helm-filtered-bookmarks)
        ("C-x C-r" . helm-recentf)  ;; Search for recently edited files
        ("C-c i"   . helm-imenu)
        ("C-h a"   . helm-apropos)
        ("M-y"     . helm-show-kill-ring)
        :map helm-map
        ;; List ‘actions’ on the currently selected item with C-z
        ("C-z"     . helm-select-action)
        ;; Keep tab completetion
        ("TAB"     . helm-execute-persistent-action)
        ("<tab>"   . helm-execute-persistent-action)))

;; Ripgrep
;; (use-package rg
;;   :config
;;   (global-set-key (kbd "M-s g") 'rg)
;;   (global-set-key (kbd "M-s d") 'rg-dwim))
;; (use-package helm-rg)

;;
;; https://github.com/raxod502/selectrum
;;
;; (use-package selectrum
;;   :init
;;   (setq selectrum-mode +1)
;;   ;; to make sorting and filtering more intelligent
;;   (setq selectrum-prescient-mode +1))
;; (use-package selectrum-prescient
;;   :init
;;   ;; to save your command history on disk, so the sorting gets more
;;   ;; intelligent over time
;;   (setq prescient-persist-mode +1))


;; RST
;; http://docutils.sourceforge.net/docs/user/emacs.html
(use-package rst
  :mode (("\\.rst$" . rst-mode)
         ("\\.rest$" . rst-mode))
  :init
  (setq rst-indent-field 4)
  (setq rst-indent-literal-normal 4)
  (setq rst-indent-comment 4)
  (setq rst-preferred-adornments
   (quote
    ((61 over-and-under 0)
     (126 simple 0)
     (45 simple 0)
     (43 simple 0)
     (96 simple 0)
     (35 simple 0)
     (64 simple 0)))))

;; Nov ePub reader
;; https://depp.brause.cc/nov.el/
(use-package nov
  :mode (("\\.epub$" . nov-mode)))

;; Completion
;; (use-package completion
;;   ;; from https://fedoraproject.org/wiki/How_to_use_Emacs_for_XML_editing
;;   :bind (("M-<return>" . complete)
;;          ("C-<return>" . completion-at-point))
;;   :init
;;   (dynamic-completion-mode))

;; ffap
;; from http://www.emacswiki.org/emacs/FindFileAtPoint
;; (use-package ffap
;;   :init
;;   (defadvice ffap-file-at-point (after
;;                                  ffap-file-at-point-after-advice ())
;;     (if (string= ad-return-value "/")
;;         (setq ad-return-value nil)))
;;   :config
;;   (ad-activate 'ffap-file-at-point))
;;   ;;(ad-deactivate 'ffap-file-at-point)


;; Projectile
;(projectile-global-mode)
(use-package helm-projectile
  :requires (helm)
  :config
  (projectile-cleanup-known-projects))
(use-package projectile
  :diminish projectile-mode
  :config ; (projectile-mode)
  :custom
  (projectile-completion-system 'helm)
  (add-to-list 'projectile-globally-unignored-files (quote (".DS_Store")))
  ;; (add-to-list 'projectile-globally-ignored-directories "backup")
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects")
    (setq projectile-project-search-path '("~/Projects")))
  (setq projectile-switch-project-action #'projectile-dired))

;; auto-complete and Jedi
;;(setenv "PYTHONPATH" (shell-command-to-string "$SHELL --login -c 'echo -n $PYTHONPATH'"))
;
;(require 'auto-complete-config)
;(ac-config-default)
;(setq jedi:setup-keys t)
;;(require 'jedi)
;; We gonna be in 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (setq jedi:environment-virtualenv
;;       (list "virtualenv" "--python=python3" "--system-site-packages"))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (setq jedi:server-args
;;       '("--sys-path" "foo"
;;         "--virtual-env" "bar"))
;(add-hook 'python-mode-hook 'jedi:setup)
;;(add-to-list 'ac-sources 'ac-sources-jedi-direct)

;; pylint
;; (autoload 'pylint "pylint")
;; (add-hook 'python-mode-hook 'pylint-add-menu-items)
;; (add-hook 'python-mode-hook 'pylint-add-key-bindings)

;; Pyenv
;;(use-package pyenv-mode)
;; (require 'pyenv-mode-auto)

;; Pipenv https://github.com/pwalsh/pipenv.el
;; (use-package pipenv
;;   :hook (python-mode . pipenv-mode)
;;   :init
;;   (setq
;;    pipenv-projectile-after-switch-function
;;    #'pipenv-projectile-after-switch-extended))

;; elpy
;; https://realpython.com/blog/python/emacs-the-best-python-editor/
;(require 'ein)
;(elpy-enable)

;; (add-hook 'python-mode-hook 'elpy-mode)
;; (with-eval-after-load 'elpy
;;   (remove-hook 'elpy-modules 'elpy-module-flymake)
;;   (add-hook 'elpy-mode-hook 'flycheck-mode)
;; ;  (add-hook 'elpy-mode-hook 'elpy-use-ipython "ipython3")
;;   (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
;;
;;(elpy-use-ipython "ipython3")
;;(elpy-use-ipython)

;; (when (require 'flycheck nil t)
;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
;;   (add-hook 'elpy-mode-hook 'flycheck-mode))

;; Auto pep8
;; (require 'py-autopep8)
;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

;; autopair
;; https://samrelton.wordpress.com/2013/09/16/emacs-and-python/
;; (require 'autopair)
;; (add-hook 'python-mode-hook 'autopair-mode)
;;(autopair-global-mode) ;; to enable in all buffers



;; Magit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (eval-after-load 'info
;;   '(progn (info-initialize)
;;           (add-to-list
;;           'Info-directory-list "/opt/homebrew/Cellar/magit/2.1.0/share/info/")))
(use-package magit
  :bind (("C-x g" .     magit-status)
         ("C-x M-g" .   magit-dispatch-popup))
  :config
  (autoload 'magit-status "magit" nil t)
  )


;; BBDB
(use-package bbdb)

;;
;; org-mode
;; https://www.reddit.com/r/emacs/comments/kynf5z/im_loving_orgmode/
;;
(use-package org
  :init
  (require 'org-habit)
  (require 'org-capture)
  (add-to-list 'auto-mode-alist '("\\.\\(org\\  |org_archive\\|txt\\)$" . org-mode))
  ;; (add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when global-font-lock-mode is on
  :bind (("\C-cl" . org-store-link)
         ("\C-ca" . org-agenda)
         ("\C-cb" . org-iswitchb))
  :config
  (setq org-directory '("~/org"))
  (setq org-agenda-files '("~/org"))
  :custom
  (org-todo-keyword-faces '(("WAITING" . "yellow")))
  (org-todo-keywords '((sequence "TODO" "WAITING" "DONE")))
  (org-agenda-start-with-log-mode t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-startup-folded 'content))

;; Set to the name of the file where new notes will be stored
  ;; (org-mobile-inbox-for-pull "~/Projects/porg/flagged.org")
  ;; Set to <your Dropbox root directory>/MobileOrg.
  ;;(org-mobile-directory "~/MobileOrg")
  ;; Set to default capture file
  ;;(org-default-notes-file (concat org-directory "/notes.org"))


;; https://writequit.org/denver-emacs/presentations/2016-04-19-whats-new-emacs25-ditaa-artist.html
;; (org-babel-do-load-languages
;;      'org-babel-load-languages
;;      '((ditaa . t)))

;; https://www.shanesveller.com/blog/2018/02/13/blogging-with-org-mode-and-ox-hugo/
; (use-package ox-hugo
;   :after ox)

;; In-file encryption
;; (require 'org-crypt)
;; (org-crypt-use-before-save-magic)
;; (setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; ;; GPG key to use for encryption
;; ;; Either the Key ID or set to nil to use symmetric encryption.
;; (setq org-crypt-key nil)

;;
;; Roam
;; https://github.com/org-roam
;;
(use-package org-roam
  :after org
  :custom
  (org-roam-directory (file-truename "~/org-roam"))
  (org-roam-db-location (file-truename "~/org-roam.db"))
  (org-roam-graph-viewer "/usr/bin/open")
  (org-roam-completion-everywhere t)
  ;; https://systemcrafters.cc/build-a-second-brain-in-emacs/getting-started-with-org-roam/
  ;; https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/
  :bind (("C-c n c" . org-roam-capture)
         ("C-c n f" . org-roam-node-find)
         ("C-c n j" . org-roam-dailies-capture-today)
         ("C-c n r" . org-roam-node-random)
         :map org-mode-map
         ("C-M-i"   . completion-at-point)
         ("C-c n a" . org-roam-alias-add)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n l" . org-roam-buffer-toggle)
         ("C-c n o" . org-id-get-create)
         ("C-c n t" . org-roam-tag-add))
  :config
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
;(use-package graphviz-dot-mode) ; requires company

;; XML
;; from https://fedoraproject.org/wiki/How_to_use_Emacs_for_XML_editing
(setq auto-mode-alist (cons '("\\.xml$" . nxml-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.xsl$" . nxml-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.xhtml$" . nxml-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.page$" . nxml-mode) auto-mode-alist))
(autoload 'xml-mode "nxml" "XML editing mode" t)
(eval-after-load 'rng-loc
  '(add-to-list 'rng-schema-locating-files "~/.schema/schemas.xml"))

;; Markdown mode
;;
;; from http://jblevins.org/projects/markdown-mode/
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(autoload 'gfm-mode "markdown-mode"
   "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
;;
;; from http://www.emacswiki.org/emacs/MarkdownMode
(add-hook 'markdown-mode-hook
          (lambda ()
             (when buffer-file-name
                (add-hook 'after-save-hook 'check-parens nil
                t))))

;; ;; Total file encryption
;; (require 'epa-file)
;; (epa-file-enable)
;; ;; use symmetric encryption always:
;; (setq epa-file-select-keys nil)
;; ;; cache the passphrase:
;; (setq epa-file-cache-passphrase-for-symmetric-encryption t)

;; ;; Twitter
;; (add-to-list 'load-path "~/Projects/twittering-mode")
;; (require 'twittering-mode)
;; (setq twittering-use-master-password t)
;; (setq twittering-icon-mode t)                ; Show icons
;; (setq twittering-timer-interval 900)         ; Update your timeline
;;                                              ; each 900 seconds (15
;;                                              ; minutes)
;; (use-package twittering-mode
;;   :init
;;   (setq twittering-use-master-password t)
;;   (setq twittering-icon-mode t)
;;   (setq twittering-timer-interval 900))

;; from http://tuhdo.github.io/c-ide.html
;; (require 'ggtags)
;; (add-hook 'c-mode-common-hook
;;           (lambda ()
;;             (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
;;               (ggtags-mode 1))))
;;
;; (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
;; (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
;; (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
;; (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
;; (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
;; (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
;;
;; (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
;;
;; When working with source code, we must pay attention to trailng
;; whitespace. It is always useful to view whitespace in current
;; buffer before committing your code.

;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; To clean up trailing whitespace, you can also run
;; whitespace-cleanup command.

;; To convert between TAB and space, you also have two commands:
;; tabify to turn an active region to use TAB for indentation, and
;; untabify to turn an active region to use space for indentation.

;; for GC
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Indentation style
;; Available C style:
;; “gnu”: The default style for GNU projects
;; “k&r”: What Kernighan and Ritchie, the authors of C used in their book
;; “bsd”: What BSD developers use, aka “Allman style” after Eric Allman.
;; “whitesmith”: Popularized by the examples that came with
;; Whitesmiths C, an early commercial C compiler.
;; “stroustrup”: What Stroustrup, the author of C++ used in his book
;; “ellemtel”: Popular C++ coding standards as defined by “Programming
;; in C++, Rules and Recommendations,” Erik Nyquist and Mats
;; Henricson, Ellemtel
;; “linux”: What the Linux developers use for kernel development
;; “python”: What Python developers use for extension modules
;; “java”: The default style for java-mode (see below)
;; “user”: When you want to define your own style
(setq c-default-style "python") ;; set style to "linux"

;; (setq c-mode-hook
;;     (function (lambda ()
;;                 (setq indent-tabs-mode nil)
;;                 (setq c-indent-level 4))))
;; (setq objc-mode-hook
;;     (function (lambda ()
;;                 (setq indent-tabs-mode nil)
;;                 (setq c-indent-level 4))))
;; (setq c++-mode-hook
;;     (function (lambda ()
;;                 (setq indent-tabs-mode nil)
;;                 (setq c-indent-level 4))))
;; (defun up-slightly () (interactive) (scroll-up 5))
;; (defun down-slightly () (interactive) (scroll-down 5))
;; (global-set-key [mouse-4] 'down-slightly)
;; (global-set-key [mouse-5] 'up-slightly)
;; (defun up-one () (interactive) (scroll-up 1))
;; (defun down-one () (interactive) (scroll-down 1))
;; (global-set-key [S-mouse-4] 'down-one)
;; (global-set-key [S-mouse-5] 'up-one)
;; (defun up-a-lot () (interactive) (scroll-up))
;; (defun down-a-lot () (interactive) (scroll-down))
;; (global-set-key [C-mouse-4] 'down-a-lot)
;; (global-set-key [C-mouse-5] 'up-a-lot)

;; (mouse-avoidance-mode 'cat-and-mouse)


;; ERC
;(setq erc-accidental-paste-threshold-seconds 0.5)

;; Compression
;; From http://oremacs.com/2015/10/23/dired-compress/
;(define-key dired-mode-map "c" 'dired-do-compress-to)
